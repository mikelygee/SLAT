/**
 * @file   comp_group_test.cpp
 * @author Michael Gauland <michael.gauland@canterbury.ac.nz>
 * @date   Mon Nov 16 15:29:29 2015
 * 
 * @brief Unit tests for classes declared in comp_group.h.
 * 
 * This file part of SLAT (the Seismic Loss Assessment Tool).
 *
 * Â©2015 Canterbury University
 */

#include "comp_group.h"
#include "relationships.h"
#include <boost/test/unit_test.hpp>

using namespace std;
using namespace SLAT;

/// Macro to save space.
#define from_mean_X_and_sigma_lnX(m, s)                                 \
    LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX((m), (s))

/**
 * Common compononent group defintion for tests
 */
struct fixture {
    shared_ptr<IM> im_rate_rel;
    shared_ptr<CompGroup>  component_group_no_delay;
    shared_ptr<CompGroup>  component_group_no_cost;
    shared_ptr<CompGroup>  component_group;
    shared_ptr<CompGroup>  component_group_adjusted_costs;
    shared_ptr<DeterministicFn> mu_edp;
    shared_ptr<DeterministicFn> sigma_edp;
    const double cost_adjustment = 2.78;
    const double delay_adjustment = 3.14;

    fixture() {
        /*
         * Prerequisites for the test component group:
         */
        /*
         * Describe the IM rate of exceedence, and use it
         * to create an IM relationship:
         */
        shared_ptr<DeterministicFn> im_rate_function(
            new NonLinearHyperbolicLaw(1221, 29.8, 62.2));
        im_rate_rel = make_shared<IM>(im_rate_function);    
        /*
         * Create functions describing the behaviour of mu and sigma
         * of an EDP; create the corresponding probabilistic function
         * and define the EDP-IM relation:
         */
        mu_edp = make_shared<PowerLawParametricCurve>(0.1, 1.5);
        sigma_edp = make_shared<PowerLawParametricCurve>(0.5, 0.0);
        shared_ptr<ProbabilisticFn> edp_im_relationship(
            new LogNormalFn(mu_edp, LogNormalFn::MEAN_X,
                            sigma_edp, LogNormalFn::SIGMA_LN_X));
        std::shared_ptr<EDP> rel(new EDP(im_rate_rel, edp_im_relationship));

        /*
         * Define fragility, cost, and delay functions for the component group:
         */
        /**
         * @todo Use LogNormalDist namespace to shorten lines?
         */
        std::shared_ptr<FragilityFn> fragFn(
            new FragilityFn( {
                    from_mean_X_and_sigma_lnX(0.0062, 0.4),
                        from_mean_X_and_sigma_lnX(0.0230, 0.4),
                        from_mean_X_and_sigma_lnX(0.0440, 0.4),
                        from_mean_X_and_sigma_lnX(0.0564, 0.4)}));
        std::shared_ptr<LossFn> costFn(new SimpleLossFn( {
                    from_mean_X_and_sigma_lnX(0.03, 0.4),
                        from_mean_X_and_sigma_lnX(0.08, 0.4),
                        from_mean_X_and_sigma_lnX(0.25, 0.4),
                        from_mean_X_and_sigma_lnX(1.00, 0.4)}));
    
        std::shared_ptr<LossFn> delayFn(new SimpleLossFn( {
                    from_mean_X_and_sigma_lnX(1.50, 0.20),
                        from_mean_X_and_sigma_lnX(3.75, 0.25), 
                        from_mean_X_and_sigma_lnX(10.0, 0.30),
                        from_mean_X_and_sigma_lnX(23.0, 0.35)}));

        /*
         * Create component groups with just cost, just delay, and both:
         */
        component_group_no_delay = make_shared<CompGroup>(rel, fragFn, costFn, shared_ptr<LossFn>(), 1, 1.0, 1.0);
        component_group_no_cost = make_shared<CompGroup>(rel, fragFn, shared_ptr<LossFn>(), delayFn, 1, 1.0, 1.0);
        component_group = make_shared<CompGroup>(rel, fragFn, costFn, delayFn, 1, 1.0, 1.0);
        component_group_adjusted_costs = make_shared<CompGroup>(rel, fragFn, costFn, delayFn, 1, 
                                                                cost_adjustment, delay_adjustment);
    };

    ~fixture() {
    };
};

/**
 * Test EDP-Cost and EDP-Delay relationships
 */
BOOST_FIXTURE_TEST_CASE(comp_group_edp_test, fixture)
{
    /**
     * Test data, generated from R.
     * @todo Include R code in git repo.
     */
    const struct { double edp, mu_loss, sd_loss, mu_delay, sd_delay; } test_data[] = {
        { 0.001, 1.93873040272997e-07, 3.47987132394903, 9.6936520552257e-06,  3.46258637879091 },
        {  0.0025050505050505, 0.000582994894259666,  2.02503942955232,  0.0291497334122114,  1.99519016183297 },
        { 0.00401010101010101,  0.00560814246654427,  1.35548759227003,   0.280403251713472,  1.31046331057705 },
        { 0.00551515151515152,   0.0139118688613512, 0.965457949400497,   0.695498564048872, 0.900982322943249 },
        { 0.00702020202020202,   0.0209983218227967, 0.731719775233439,    1.04918884363719, 0.642996856494479 },
        { 0.00852525252525253,   0.0257866094288791, 0.611814515628875,      1.286331645331, 0.496118119279071 },
        {   0.010030303030303,   0.0291644819821245, 0.589650905789944,    1.44961965253114, 0.448390101719482 },
        {  0.0115353535353535,   0.0321861392819618, 0.644568118710147,    1.58953059902188, 0.476227727202659 },
        {   0.013040404040404,   0.0355669381919485, 0.743669962487126,    1.73881115017376, 0.540145724924414 },
        {  0.0145454545454545,    0.039722467920839, 0.855903969698538,    1.91399324706395, 0.611905480382447 },
        {  0.0160505050505051,   0.0449061147548354, 0.960825142653713,    2.12198131558098, 0.679261781702538 },
        {  0.0175555555555556,   0.0513118927727996,  1.04831883999884,    2.36526881068029, 0.738180537539536 },
        {  0.0190606060606061,   0.0591245015859234,  1.11524100057623,    2.64489595423536, 0.787569567901326 },
        {  0.0205656565656566,   0.0685300147997496,   1.1622098555976,    2.96168990562432,  0.82727522107632 },
        {  0.0220707070707071,   0.0797048885173563,  1.19151720467215,    3.31649697165177, 0.857557203655655 },
        {  0.0235757575757576,   0.0927973137855343,  1.20600292015265,    3.70995641226687, 0.878981022967607 },
        {  0.0250808080808081,    0.107909765634935,  1.20850217886874,    4.14216067175281, 0.892354258029006 },
        {  0.0265858585858586,    0.125087151373553,  1.20159135108874,    4.61238071237385, 0.898639929236568 },
        {  0.0280909090909091,    0.144311841010493,  1.18748813188097,    5.11892357423099, 0.898864354812875 },
        {  0.0295959595959596,    0.165505011278759,  1.16803355693633,    5.65912499068499, 0.894040318336408 },
        {  0.0311010101010101,    0.188532852528551,  1.14471671201617,    6.22944933965102, 0.885113960794984 },
        {  0.0326060606060606,    0.213215945826187,  1.11871899823039,     6.8256597061854, 0.872934515190449 },
        {  0.0341111111111111,    0.239340243077892,  1.09096414605696,    7.44302276478129, 0.858241906430593 },
        {  0.0356161616161616,    0.266668381109475,  1.06216629851256,    8.07652019767276, 0.841666512106316 },
        {  0.0371212121212121,     0.29495040750988,  1.03287250039411,    8.72104668301231, 0.823736207236508 },
        {  0.0386262626262626,    0.323933321942185,  1.00349837933343,    9.37158215675637, 0.804887096199955 },
        {  0.0401313131313131,    0.353369108702089, 0.974357143602419,     10.023332252252,  0.78547554116194 },
        {  0.0416363636363636,    0.383021144609071, 0.945682645600973,     10.671835375449, 0.765790041712858 },
        {  0.0431414141414141,    0.412669013663345, 0.917647466977519,    11.3130379294316, 0.746062185867754 },
        {  0.0446464646464646,    0.442111855184327, 0.890376970843541,    11.9433410381683, 0.726476324784294 },
        {  0.0461515151515152,    0.471170426252686, 0.863960159073356,    12.5596230379994,  0.70717788430873 },
        {  0.0476565656565657,    0.499688082824663, 0.838458034608221,    13.1592422792906, 0.688280370978226 },
        {  0.0491616161616162,    0.527530886120697, 0.813910032970174,    13.7400246332645, 0.669871200664389 },
        {  0.0506666666666667,    0.554587029296979, 0.790338967824327,    14.3002397010879, 0.652016504227138 },
        {  0.0521717171717172,    0.580765759719097, 0.767754836455886,    14.8385691973312, 0.634765065823829 },
        {  0.0536767676767677,    0.605995948544945, 0.746157751774659,    15.3540704124915, 0.618151538058048 },
        {  0.0551818181818182,    0.630224434677856, 0.725540205348536,    15.8461371038629, 0.602199061212321 },
        {  0.0566868686868687,     0.65341424635303, 0.705888817939764,     16.314459652914, 0.586921395488282 },
        {  0.0581919191919192,    0.675542781798947, 0.687185697180612,    16.7589858771199, 0.572324657628373 },
        {  0.0596969696969697,    0.696600011156826, 0.669409493896749,    17.1798835009612,  0.55840873751218 },
        {  0.0612020202020202,    0.716586745357077, 0.652536227147665,    17.5775049738621, 0.545168456650793 },
        {  0.0627070707070707,    0.735513003909487, 0.636539931710902,     17.952355067517, 0.532594518937867 },
        {  0.0642121212121212,    0.753396502380918,  0.62139316925897,    18.3050614845774, 0.520674294381387 },
        {  0.0657171717171717,    0.770261271446563, 0.607067434924507,    18.6363485574422, 0.509392468594367 },
        {  0.0672222222222222,    0.786136412509419, 0.593533483608935,    18.9470140023153, 0.498731584314224 },
        {  0.0687272727272727,    0.801054989684601, 0.580761594727289,    19.2379086126291, 0.488672495914455 },
        {  0.0702323232323232,     0.81505305415275, 0.568721789695846,     19.509918720982, 0.479194753562324 },
        {  0.0717373737373737,    0.828168794238142,  0.55738401305968,    19.7639512243315, 0.470276930187661 },
        {  0.0732424242424242,    0.840441802831414, 0.546718285500172,    20.0009209486046, 0.461896901615221 },
        {  0.0747474747474747,    0.851912452755684, 0.536694834890298,    20.2217401222086, 0.454032087957223 },
        {  0.0762525252525253,    0.862621370201147, 0.527284209952286,    20.4273097299597, 0.446659662565934 },
        {  0.0777575757575757,    0.872608996288849, 0.518457379822977,    20.6185125271294,  0.43975673342838 },
        {  0.0792626262626263,    0.881915227056994, 0.510185821874197,    20.7962075056228, 0.433300500779919 },
        {  0.0807676767676768,    0.890579122602871, 0.502441599412021,    20.9612256191935, 0.427268393865008 },
        {  0.0822727272727273,    0.898638676689509, 0.495197430345213,    21.1143665908674,  0.42163818913475 },
        {  0.0837777777777778,    0.906130638783784, 0.488426747532734,    21.2563966425293, 0.416388111701388 },
        {  0.0852828282828283,    0.913090381190115,  0.48210375126275,    21.3880470032556, 0.411496921535053 },
        {  0.0867878787878788,    0.919551804650391, 0.476203454155316,    21.5100130690398, 0.406943985657726 },
        {  0.0882929292929293,    0.925547276473821,  0.47070171869577,    21.6229541017193, 0.402709337438008 },
        {  0.0897979797979798,    0.931107595924623, 0.465575287576875,    21.7274933690243, 0.398773723996132 },
        {  0.0913030303030303,     0.93626198222048, 0.460801807038706,    21.8242186406031, 0.395118642673754 },
        {  0.0928080808080808,    0.941038081074367, 0.456359843432294,    21.9136829666207, 0.391726367492855 },
        {  0.0943131313131313,      0.9454619862435, 0.452228893284969,    21.9964056760745, 0.388579966511308 },
        {  0.0958181818181818,    0.949558273030973, 0.448389387202921,    22.0728735413752, 0.385663310970657 },
        {  0.0973232323232323,    0.953350041118831, 0.444822688002838,    22.1435420640546, 0.382961077118557 },
        {  0.0988282828282828,    0.956858964497797,  0.44151108351449,    22.2088368437747, 0.380458741570222 },
        {   0.100333333333333,    0.960105346601324, 0.438437774536408,    22.2691549991896, 0.378142571047987 },
        {   0.101838383838384,    0.963108179053047, 0.435586858455528,    22.3248666147561,  0.37599960730497 },
        {   0.103343434343434,    0.965885202700578, 0.432943309058065,    22.3763161923693, 0.374017647998077 },
        {   0.104848484848485,    0.968452969838181, 0.430492953063158,    22.4238240908068, 0.372185224228123 },
        {   0.106353535353535,    0.970826906719596, 0.428222443904015,    22.4676879394698, 0.370491575412088 },
        {   0.107858585858586,    0.973021375633479, 0.426119233264543,    22.5081840158885, 0.368926622095929 },
        {   0.109363636363636,    0.975049735960446, 0.424171540854729,    22.5455685789698, 0.367480937257704 },
        {   0.110868686868687,    0.976924403755671, 0.422368322876701,    22.5800791520751, 0.366145716591374 },
        {   0.112373737373737,    0.978656909506774, 0.420699239597616,    22.6119357517745, 0.364912748203008 },
        {   0.113878787878788,     0.98025795380588, 0.419154622406513,    22.6413420595749, 0.363774382094352 },
        {   0.115383838383838,    0.981737460749374, 0.417725440691839,     22.668486535118, 0.362723499754699 },
        {   0.116888888888889,    0.983104628940883, 0.416403268835509,    22.6935434703108, 0.361753484131443 },
        {   0.118393939393939,    0.984367980024236,  0.41518025357934,    22.7166739846342, 0.360858190203097 },
        {    0.11989898989899,    0.985535404714976, 0.414049081981154,    22.7380269624943, 0.360031916336128 },
        {    0.12140404040404,    0.986614206332891, 0.413002950141581,    22.7577399339638, 0.359269376568872 },
        {   0.122909090909091,    0.987611141865143, 0.412035532848877,    22.7759399006319, 0.358565673931996 },
        {   0.124414141414141,     0.98853246061087, 0.411140954258297,    22.7927441085521, 0.357916274885343 },
        {   0.125919191919192,    0.989383940474634, 0.410313759694848,    22.8082607704745, 0.357316984925373 },
        {   0.127424242424242,    0.990170921988501, 0.409548888643551,    22.8225897396774, 0.356763925395391 },
        {   0.128929292929293,    0.990898340151516, 0.408841648969713,    22.8358231377883, 0.356253511512301 },
        {   0.130434343434343,    0.991570754181545, 0.408187692392955,    22.8480459390173,  0.35578243160808 },
        {   0.131939393939394,    0.992192375278299, 0.407582991222694,    22.8593365132238, 0.355347627571578 },
        {   0.133444444444444,    0.992767092498329, 0.407023816349276,    22.8697671302075,  0.35494627646596 },
        {   0.134949494949495,    0.993298496843211, 0.406506716473723,    22.8794044275604, 0.354575773289092 },
        {   0.136454545454545,    0.993789903661339, 0.406028498549933,    22.8883098443541, 0.354233714837976 },
        {   0.137959595959596,    0.994244373461974, 0.405586209405841,    22.8965400228497, 0.353917884633739 },
        {   0.139464646464646,    0.994664731237692, 0.405177118504417,    22.9041471803342, 0.353626238860506 },
        {   0.140969696969697,    0.995053584388265, 0.404798701801076,    22.9111794530881, 0.353356893269391 },
        {   0.142474747474747,     0.99541333933553, 0.404448626651043,    22.9176812143939, 0.353108110997792 },
        {   0.143979797979798,    0.995746216914995, 0.404124737718263,    22.9236933683925, 0.352878291253792 },
        {   0.145484848484848,    0.996054266625932, 0.403825043836253,    22.9292536214952, 0.352665958815886 },
        {   0.146989898989899,    0.996339379817654, 0.403547705770976,    22.9343967329608, 0.352469754299022 },
        {   0.148494949494949,    0.996603301885515, 0.403291024835988,     22.939154746148, 0.352288425139224 },
        {                0.15,    0.996847643546096, 0.403053432310849,    22.9435572018616, 0.352120817250603 },
    };

    /*
     * Run through the test cases, checking the relationships between cost and
     * delay, and EDP. 
     */
    for (size_t i=0; i < sizeof(test_data)/sizeof(test_data[0]); i++) {
        /*
         * Tests for the full component group--check both delay and cost
         * distribution against test data.
         */
        if (std::abs(test_data[i].mu_loss) < 1E-10) {
            BOOST_CHECK_SMALL(component_group->E_cost_EDP(test_data[i].edp), 1E-10);
        } else {
            BOOST_CHECK_CLOSE(component_group->E_cost_EDP(test_data[i].edp), 
                              test_data[i].mu_loss,
                              0.1);
        }

        if (std::abs(test_data[i].sd_loss) < 1E-6) {
            BOOST_CHECK_SMALL(component_group->SD_ln_cost_EDP(test_data[i].edp), 1E-6);
        } else {
            BOOST_CHECK_CLOSE(component_group->SD_ln_cost_EDP(test_data[i].edp), 
                              test_data[i].sd_loss,
                              0.5);
        }

        BOOST_CHECK_CLOSE(component_group->E_delay_EDP(test_data[i].edp), 
                          test_data[i].mu_delay,
                          0.1);
        BOOST_CHECK_CLOSE(component_group->SD_ln_delay_EDP(test_data[i].edp), 
                          test_data[i].sd_delay,
                          0.5);

        /*
         * Tests for the component group with no cost function. The "cost"
         * methods should return NAN, and the "delay" methods should agree with
         * the full component group.
         */
        BOOST_CHECK(std::isnan(component_group_no_cost->E_cost_EDP(test_data[i].edp)));
        BOOST_CHECK(std::isnan(component_group_no_cost->E_cost_EDP(test_data[i].edp)));
        BOOST_CHECK_EQUAL(component_group->E_delay_EDP(test_data[i].edp), 
                          component_group_no_cost->E_delay_EDP(test_data[i].edp));
        BOOST_CHECK_EQUAL(component_group->SD_ln_delay_EDP(test_data[i].edp), 
                          component_group_no_cost->SD_ln_delay_EDP(test_data[i].edp));

        /*
         * Tests for the component group with no delay function. The "delay"
         * methods should return NAN, and the "cost" methods should agree with
         * the full component group.
         */
        BOOST_CHECK_EQUAL(component_group->E_cost_EDP(test_data[i].edp), 
                          component_group_no_delay->E_cost_EDP(test_data[i].edp));
        BOOST_CHECK_EQUAL(component_group->SD_ln_cost_EDP(test_data[i].edp), 
                          component_group_no_delay->SD_ln_cost_EDP(test_data[i].edp));
        BOOST_CHECK(std::isnan(component_group_no_delay->E_delay_EDP(test_data[i].edp)));
        BOOST_CHECK(std::isnan(component_group_no_delay->E_delay_EDP(test_data[i].edp)));

        /*
         * Tests for the full component group, with adjusted cost and delay. Check both delay and cost
         * distribution against test data.
         */
        if (std::abs(test_data[i].mu_loss) < 1E-10) {
            BOOST_CHECK_SMALL(component_group_adjusted_costs->E_cost_EDP(test_data[i].edp), 1E-10);
        } else {
            BOOST_CHECK_CLOSE(component_group_adjusted_costs->E_cost_EDP(test_data[i].edp), 
                              test_data[i].mu_loss * cost_adjustment,
                              0.1);
        }

        if (std::abs(test_data[i].sd_loss) < 1E-6) {
            BOOST_CHECK_SMALL(component_group_adjusted_costs->SD_ln_cost_EDP(test_data[i].edp), 1E-6);
        } else {
            BOOST_CHECK_CLOSE(component_group_adjusted_costs->SD_ln_cost_EDP(test_data[i].edp), 
                              test_data[i].sd_loss,
                              0.5);
        }

        BOOST_CHECK_CLOSE(component_group_adjusted_costs->E_delay_EDP(test_data[i].edp), 
                          test_data[i].mu_delay * delay_adjustment,
                          0.1);
        BOOST_CHECK_CLOSE(component_group_adjusted_costs->SD_ln_delay_EDP(test_data[i].edp), 
                          test_data[i].sd_delay,
                          0.5);
    }
}

/*
 * Test IM-Cost and IM-Delay relationships
 */
BOOST_FIXTURE_TEST_CASE(comp_group_im_test, fixture)
{
    Integration::IntegrationSettings::Set_Tolerance(1E-6);
    Integration::IntegrationSettings::Set_Integration_Eval_Limit(1024);
    /*
     * Test data, generated by R:
     */
    const struct { double im, mu_cost, sd_cost, mu_delay, sd_delay; } im_test_data[] = {
        //{ 0.001, 0.00, 0.00, 0.00, 0.00 },
        //{ 0.0262424242424242, 1.85080465806351e-06,  3.13900230180837, 1.19237226666278e-05,  3.43256852159795 },
        // { 0.0514848484848485, 2.57982669990014e-05,  3.02359442765592,  0.00627245414263153,  2.34909973006487 },
        // { 0.0767272727272727,  0.00127051018982633,  1.52471058938272,   0.0635016933296437,  1.79177063316265 },
        //{  0.101969696969697,   0.0043317751421337, 0.825439293800393,      0.2162469389275,  1.41755496090868 },
        {  0.127212121212121,  0.00896915946635676,  1.24069369021963,    0.446204600979529,  1.16075569081185 },
        {  0.152454545454545,   0.0143963903934331,   1.1633176150013,    0.710380165789865,  1.00384206587202 },
        {   0.17769696969697,   0.0202499170891187,  1.19099562292812,    0.983180977234416, 0.940178931785575 },
        {  0.202939393939394,   0.0267231256414215,  1.26388358765232,     1.26262948310435, 0.946189815895173 },
        {  0.228181818181818,   0.0343584333002944,  1.33112720617856,     1.56077642205832,   0.9844381316091 },
        {  0.253424242424242,   0.0438129617024699,  1.37361867411822,     1.89386626443807,  1.02556726513016 },
        {  0.278666666666667,   0.0556928095040233,  1.38976555023092,     2.27634701263679,   1.0555477171418 },
        {  0.303909090909091,   0.0704582761320447,  1.38430750742494,      2.7181897234951,  1.07073007710705 },
        {  0.329151515151515,   0.0883823213014176,  1.36316228226711,     3.22422391610875,  1.07224768209372 },
        {  0.354393939393939,    0.109545189953498,  1.33151185132103,     3.79451782484473,  1.06280471302328 },
        {  0.379636363636364,    0.133852212788279,  1.29332754271222,     4.42522487151208,  1.04523479587012 },
        {  0.404878787878788,    0.161064541059805,  1.25145373312412,      5.1095778545595,  1.02197646795257 },
        {  0.430121212121212,    0.190835447353399,    1.207851117619,     5.83886087536017, 0.994956863081384 },
        {  0.455363636363636,    0.222746826471212,  1.16383920546924,     6.60327209742157, 0.965632951439726 },
        {  0.480606060606061,    0.256342453994591,  1.12029002408388,     7.39263856518724, 0.935078568749914 },
        {  0.505848484848485,    0.291156121822932,  1.07776919412789,     8.19697299652504, 0.904072502915592 },
        {  0.531090909090909,    0.326733816811191,  1.03663452087129,     9.00688137576324, 0.873172628537468 },
        {  0.556333333333333,    0.362650096874758, 0.997103206414493,     9.81383513531443, 0.842774095495341 },
        {  0.581575757575758,    0.398519123226536, 0.959297465689581,     10.6103265186746,  0.81315366957007 },
        {  0.606818181818182,    0.434001173233706, 0.923275368220667,     11.3899747597448, 0.784498036989355 },
        {  0.632060606060606,    0.468805510006027, 0.889051733847648,     12.1474771148175,  0.75693370429922 },
        {   0.65730303030303,    0.502690465338346, 0.856612337834706,     12.8786072628014, 0.730539227885232 },
        {  0.682545454545455,    0.535461506151575, 0.825923604746671,     13.5801284296787, 0.705359060339827 },
        {  0.707787878787879,     0.56696793839386, 0.796939246952082,     14.2496983919406, 0.681412623411796 },
        {  0.733030303030303,    0.597098782248887, 0.769604814901016,     14.8857646305065, 0.658700945522944 },
        {  0.758272727272727,    0.625778210774324, 0.743860860789109,     15.4874567417858, 0.637211562121399 },
        {  0.783515151515152,    0.652960906845072, 0.719645052979125,     16.0544825871126, 0.616922019111698 },
        {  0.808757575757576,    0.678627499427822,  0.69689368476744,     16.5870284560067, 0.597802685717088 },
        {              0.834,    0.702780284986156,  0.67554264938593,     17.0856695577882, 0.579818656652657 },
        {  0.859242424242424,    0.725439252937195, 0.655528182011195,     17.5512889409629, 0.562931274370862 },
        {  0.884484848484849,    0.746638553575885, 0.636787290486476,     17.9850063325676, 0.547099253853472 },
        {  0.909727272727273,    0.766423357732106, 0.619258080196559,     18.3881165963431, 0.532279556540361 },
        {  0.934969696969697,    0.784847131987726,  0.60287996726678,     18.7620373221868, 0.518428059035914 },
        {  0.960212121212121,    0.801969305728237, 0.587593823624579,     19.1082648476106, 0.505500078499227 },
        {  0.985454545454545,    0.817853301692277, 0.573342077694896,     19.4283379143343, 0.493450788916415 },
        {   1.01069696969697,    0.832564896534199, 0.560068786936029,     19.7238080022777, 0.482235566205488 },
        {   1.03593939393939,    0.846170875889889, 0.547719692718384,     19.9962157649135, 0.471810253317479 },
        {   1.06118181818182,    0.858737947503599, 0.536242266047919,     20.2470723611898, 0.462131400247153 },
        {   1.08642424242424,    0.870331880240934, 0.525585743591955,     20.4778452504334, 0.453156455560109 },
        {   1.11166666666667,    0.881016833837718, 0.515701162671373,     20.6899476265739, 0.444843930529505 },
        {   1.13690909090909,    0.890854852699004, 0.506541390540954,     20.8847309062695, 0.437153538110848 },
        {   1.16215151515152,    0.899905496304524, 0.498061149939585,     21.0634797332587, 0.430046309306463 },
        {   1.18739393939394,    0.908225583172086, 0.490217040003307,     21.2274090315248,  0.42348468935843 },
        {   1.21263636363636,    0.915869028036657, 0.482967551499072,      21.377662705292, 0.417432614980629 },
        {   1.23787878787879,    0.922886754650001, 0.476273103567103,     21.5153136435508, 0.411855573735057 },
        {   1.26312121212121,    0.929326669127316, 0.470095904333636,     21.6413647402729, 0.406720674833408 },
        {   1.28836363636364,    0.935233681042973, 0.464400225208374,     21.7567506887441, 0.401996533872506 },
        {   1.31360606060606,    0.940649761501133, 0.459152104465347,     21.8623405191707, 0.397653548299022 },
        {   1.33884848484848,    0.945614029186094, 0.454319464084474,     21.9589395288096, 0.393663709043165 },
        {   1.36409090909091,    0.950162856944577, 0.449872049622416,     22.0472940291245, 0.390000532367604 },
        {   1.38933333333333,    0.954329992787214, 0.445781390362474,     22.1280928711709, 0.386639200201893 },
        {   1.41457575757576,    0.958146690337874, 0.442020752269839,       22.20197159402, 0.383556426596761 },
        {   1.43981818181818,    0.961641844729268, 0.438565084549161,     22.2695155701017,  0.38073043271869 },
        {   1.46506060606061,    0.964842130760681, 0.435390960708847,      22.331263281316, 0.378140895383941 },
        {   1.49030303030303,    0.967772140818575, 0.432476515097513,     22.3877095167843, 0.375768890022552 },
        {   1.51554545454545,    0.970454520630608, 0.429801375897536,     22.4393084629398, 0.373596829400101 },
        {   1.54078787878788,    0.972910101394722, 0.427346595544569,     22.4864766650968, 0.371608399329663 },
        {    1.5660303030303,    0.975158027211285, 0.425094579497346,     22.5295958464508, 0.369788492494077 },
        {   1.59127272727273,    0.977215877061303,  0.42302901421557,     22.5690155759172, 0.368123141375164 },
        {   1.61651515151515,    0.979099780828097, 0.421134795122177,     22.6050557805243, 0.366599451158574 },
        {   1.64175757575758,     0.98082452906338, 0.419397955235715,     22.6380091014498, 0.365205533355175 },
        {              1.667,    0.982403676359963, 0.417805595063732,     22.6681430953795, 0.363930440756402 },
        {   1.69224242424242,    0.983849638319614, 0.416345814253124,     22.6957022848282, 0.362764104224426 },
        {   1.71748484848485,    0.985173782201228, 0.415007645402339,     22.7209100624925, 0.361697271711679 },
        {   1.74272727272727,    0.986386511408393, 0.413780990353548,      22.743970455737,  0.36072144980704 },
        {    1.7679696969697,     0.98749734402839, 0.412656559205151,     22.7650697579804, 0.359828848022131 },
        {   1.79321212121212,    0.988514985673551, 0.411625812213166,     22.7843780341817, 0.359012325956128 },
        {   1.81845454545455,    0.989447396900719, 0.410680904688686,     22.8020505078179, 0.358265343415507 },
        {   1.84369696969697,    0.990301855500099, 0.409814634944467,      22.818228836793, 0.357581913512065 },
        {   1.86893939393939,    0.991085013952178, 0.409020395298308,     22.8330422856343, 0.356956558719378 },
        {   1.89418181818182,    0.991802952352373, 0.408292126103321,     22.8466088011509, 0.356384269833317 },
        {   1.91942424242424,    0.992461227099508, 0.407624272744468,     22.8590359984854,  0.35586046775502 },
        {   1.94466666666667,     0.99306491537707, 0.407011745872703,     22.8704220577636, 0.355380968785558 },
        {   1.96990909090909,    0.993618657323609, 0.406449882565054,     22.8808565775606,   0.3549419481008 },
        {   1.99515151515152,    0.994126691963033, 0.405934414002036,     22.8904212878848, 0.354539915874876 },
        {   2.02039393939394,    0.994592892964046, 0.405461431656704,     22.8991907709489, 0.354171683455395 },
        {   2.04563636363636,    0.995020799931119,  0.40502735798694,     22.9072330839827, 0.353834339921269 },
        {   2.07087878787879,    0.995413647345583, 0.404628918953395,     22.9146103351109, 0.353525227889552 },
        {   2.09612121212121,    0.995774391040206, 0.404263118667055,      22.921379208859, 0.353241921640061 },
        {   2.12136363636364,    0.996105732405762, 0.403927216031743,     22.9275914455129, 0.352982207038503 },
        {   2.14660606060606,    0.996410140514792, 0.403618703249213,     22.9332942782488, 0.352744063129507 },
        {   2.17184848484849,    0.996689872334145, 0.403335286059174,     22.9385308316405, 0.352525645276949 },
        {   2.19709090909091,    0.996946991185757, 0.403074865590868,     22.9433404848774, 0.352325269734138 },
        {   2.22233333333333,    0.997183383602607, 0.402835521708988,     22.9477592027488, 0.352141399533493 },
        {   2.24757575757576,    0.997400774716145, 0.402615497741832,     22.9518198372155, 0.351972631590832 },
        {   2.27281818181818,    0.997600742300181, 0.402413186486445,      22.955552402143, 0.351817684926767 },
        {   2.29806060606061,     0.99778472958666, 0.402227117391294,      22.958984323566, 0.351675389913651 },
        {   2.32330303030303,    0.997954056959015,  0.40205594482366,     22.9621406676431,  0.35154467846327 },
        {   2.34854545454545,    0.998109932620674, 0.401898437334406,       22.96504434829, 0.351424575075914 },
        {   2.37378787878788,    0.998253462327567, 0.401753467839508,     22.9677163162926, 0.351314188678157 },
        {    2.3990303030303,    0.998385658266525,  0.40162000464288,     22.9701757315584, 0.351212705181549 },
        {   2.42427272727273,    0.998507447154202, 0.401497103230935,     22.9724401200094,  0.35111938070027 },
        {   2.44951515151515,    0.998619677625005,  0.40138389877428,     22.9745255164941, 0.351033535370311 },
        {   2.47475757575758,    0.998723126970669, 0.401279599276875,     22.9764465949759, 0.350954547717515 },
        {                2.5,    0.998818507288298, 0.401183479318121,     22.9782167871315,  0.35088184952663 }
    };    

    /*
     * Test the relationships betwee IM and cost and between IM and delay:
     */
    for (size_t i=0; i < sizeof(im_test_data)/sizeof(im_test_data[0]); i++) {
        if (std::abs(im_test_data[i].mu_cost) < 1E-20) {
            BOOST_CHECK_SMALL(component_group->E_cost_IM(im_test_data[i].im), 1E-20);
        } else {
            BOOST_CHECK_CLOSE(component_group->E_cost_IM(im_test_data[i].im), 
                              im_test_data[i].mu_cost,
                              0.5);
        }

        if (std::abs(im_test_data[i].sd_cost) < 1E-6) {
            BOOST_CHECK_SMALL(component_group->SD_ln_cost_IM(im_test_data[i].im), 1E-6);
        } else {
            BOOST_CHECK_CLOSE(component_group->SD_ln_cost_IM(im_test_data[i].im), 
                              im_test_data[i].sd_cost,
                              1);
        }

        if (std::abs(im_test_data[i].mu_delay) < 1E-20) {
            BOOST_CHECK_SMALL(component_group->E_delay_IM(im_test_data[i].im), 1E-20);
        } else {
            BOOST_CHECK_CLOSE(component_group->E_delay_IM(im_test_data[i].im), 
                              im_test_data[i].mu_delay,
                              0.5);
        }

        if (std::abs(im_test_data[i].sd_delay) < 1E-6) {
            BOOST_CHECK_SMALL(component_group->SD_ln_delay_IM(im_test_data[i].im), 1E-6);
        } else {
            BOOST_CHECK_CLOSE(component_group->SD_ln_delay_IM(im_test_data[i].im), 
                              im_test_data[i].sd_delay,
                              1);
        }
    }

    /*
     * Replace the mu_edp function. This should clear the component group's cache:
     */
    {
        shared_ptr<DeterministicFn> new_mu_edp(new PowerLawParametricCurve(3 * 0.1, 1.5));
        mu_edp->replace(new_mu_edp);

        /*
         * Test data for the modified calculations:
         */
        const struct { double im, mu_cost, sd_cost, mu_delay, sd_delay; } im_test_data[] = {
            //{              0.001 ,                    0 ,                 0 ,                   0 ,                 0 },
            //{ 0.0262424242424242 , 4.72203069460584e-05 ,  2.85459535886703 , 0.00920100696880249 ,  2.26616906173896 },
            //{ 0.0514848484848485 ,  0.00517248203868923 , 0.780331133074731 ,   0.258098022088309 ,  1.35694150874317 },
            { 0.0767272727272727 ,   0.0160106389791945 ,  1.16277733028747 ,   0.787182753582326 , 0.976935770397225 },
            {  0.101969696969697 ,   0.0293272162137328 ,   1.2904674384632 ,    1.36788953349169 , 0.958232154384479 },
            {  0.127212121212121 ,   0.0487475779416337 ,   1.3838104471788 ,    2.05658069387455 ,  1.04061253104884 },
            {  0.152454545454545 ,   0.0794343496870605 ,  1.37484381057191 ,    2.97487958514427 ,  1.07307090561982 },
            {   0.17769696969697 ,    0.123847691826762 ,  1.30904977541917 ,      4.168221201584 ,  1.05300867515417 },
            {  0.202939393939394 ,    0.181159299208347 ,  1.22174959511519 ,    5.60373436863878 ,  1.00381958459405 },
            {  0.228181818181818 ,    0.248271282569778 ,  1.13051174632406 ,    7.20427163650614 , 0.942369011523996 },
            {  0.253424242424242 ,    0.321137684061281 ,  1.04296534916249 ,    8.88022282858451 , 0.877979934651699 },
            {  0.278666666666667 ,    0.395792327747959 ,  0.96211922905788 ,    10.5500814695668 , 0.815381409435447 },
            {  0.303909090909091 ,    0.468935955216147 , 0.888925292669848 ,    12.1503034406839 , 0.756831306915737 },
            {  0.329151515151515 ,    0.538154587218472 ,  0.82342767837043 ,    13.6375448201227 , 0.703302955322399 },
            {  0.354393939393939 ,    0.601902149240196 ,  0.76527640737643 ,    14.9867895346132 ,  0.65509421763693 },
            {  0.379636363636364 ,     0.65936482716478 , 0.713960041642012 ,    16.1876126025123 , 0.612149341639946 },
            {  0.404878787878788 ,     0.71028695673417 , 0.668912032054271 ,    17.2401576517927 , 0.574226787223967 },
            {  0.430121212121212 ,     0.75480330614036 , 0.629559292703502 ,    18.1515567420878 , 0.540989505620748 },
            {  0.455363636363636 ,    0.793298047572481 , 0.595344162842471 ,    18.9330781438049 , 0.512054518268122 },
            {  0.480606060606061 ,    0.826296095919619 , 0.565734121903983 ,    19.5980207706524 , 0.487021444221187 },
            {  0.505848484848485 ,    0.854384776237781 , 0.540226257511149 ,    20.1602598241971 , 0.465489747446966 },
            {  0.531090909090909 ,    0.878160753806597 ,   0.5183495893714 ,    20.6333081555332 , 0.447069858274561 },
            {  0.556333333333333 ,    0.898196455675654 , 0.499666580837474 ,    21.0297598868468 , 0.431390790436482 },
            {  0.581575757575758 ,    0.915020711959165 , 0.483774261170112 ,    21.3610033227645 , 0.418105454807018 },
            {  0.606818181818182 ,    0.929109288841323 , 0.470304959263128 ,    21.6371141479602 , 0.406894269153675 },
            {  0.632060606060606 ,    0.940881980833396 , 0.458926522944406 ,    21.8668631997265 , 0.397467102319259 },
            {   0.65730303030303 ,    0.950703819848386 , 0.449341907652278 ,    22.0577908636298 , 0.389564462657129 },
            {  0.682545454545455 ,    0.958888679175631 ,   0.4412880963649 ,    22.2163196005853 ,  0.38295670999565 },
            {  0.707787878787879 ,    0.965704102222151 , 0.434534400117153 ,    22.3478778508733 , 0.377443174702811 },
            {  0.733030303030303 ,    0.971376591042258 ,  0.42888025593507 ,    22.4570279407682 , 0.372850152696544 },
            {  0.758272727272727 ,    0.976096877376133 , 0.424152675254638 ,    22.5475867789323 , 0.369028609462816 },
            {  0.783515151515152 ,    0.980024897207466 , 0.420203502307865 ,     22.622736368213 , 0.365851640432122 },
            {  0.808757575757576 ,    0.983294322524231 , 0.416906626493356 ,    22.6851221799336 , 0.363211877362663 },
            {              0.834 ,    0.986016589861939 , 0.414155264948538 ,     22.736939058274 , 0.361018968161286 },
            {  0.859242424242424 ,    0.988284418581305 , 0.411859399613615 ,    22.7800051772361 , 0.359197216320707 },
            {  0.884484848484849 ,     0.99017484312667 , 0.409943422705256 ,    22.8158250310318 , 0.357683430968888 },
            {  0.909727272727273 ,    0.991751800190463 , 0.408344018842711 ,    22.8456426428597 , 0.356425011046533 },
            {  0.934969696969697 ,    0.993068318728533 , 0.407008292613531 ,    22.8704862177292 , 0.355378268080562 },
            {  0.960212121212121 ,    0.994168364151597 , 0.405892133678862 ,     22.891205467571 , 0.354506972754587 },
            {  0.985454545454545 ,     0.99508837991595 ,   0.4049588107292 ,    22.9085025920013 , 0.353781122786537 },
            {   1.01069696969697 ,    0.995858576820465 , 0.404177765727699 ,    22.9229580475522 , 0.353175887367134 },
            {   1.03593939393939 ,    0.996504004014172 ,  0.40352359317217 ,    22.9350518323564 , 0.352670726746027 },
            {   1.06118181818182 ,    0.997045438374611 ,  0.40297517879356 ,    22.9451810764031 , 0.352248653102296 },
            {   1.08642424242424 ,    0.997500121515746 , 0.402514976616123 ,    22.9536745531758 , 0.351895615138682 },
            {   1.11166666666667 ,    0.997882369762345 , 0.402128404437236 ,    22.9608046407515 , 0.351599987151508 },
            {   1.13690909090909 ,    0.998204078537201 , 0.401803339826305 ,    22.9667971749426 , 0.351352145938823 },
            {   1.16215151515152 ,    0.998475139194934 , 0.401529700891297 ,    22.9718395634599 , 0.351144121126379 },
            {   1.18739393939394 ,     0.99870378338745 , 0.401299098160574 ,    22.9760874674376 , 0.350969306578384 },
            {   1.21263636363636 ,    0.998896867528144 , 0.401104545883685 ,    22.9796703038296 , 0.350822222452263 },
            {   1.23787878787879 ,    0.999060107791688 , 0.400940222819372 ,    22.9826957779683 , 0.350698319126718 },
            {   1.26312121212121 ,    0.999198274294406 ,  0.40080127413819 ,      22.98525361871 , 0.350593815681746 },
            {   1.28836363636364 ,    0.999315351603379 , 0.400683647419109 ,     22.987418658046 , 0.350505566846541 },
            {   1.31360606060606 ,     0.99941467147547 , 0.400583956879498 ,    22.9892533717809 , 0.350430953378736 },
            {   1.33884848484848 ,    0.999499022693099 , 0.400499370962482 ,    22.9908100238881 , 0.350367785902492 },
            {   1.36409090909091 ,    0.999570745229875 , 0.400427516720735 ,    22.9921322127496 , 0.350314258682534 },
            {   1.38933333333333 ,    0.999631792384819 , 0.400366412844383 ,    22.9932565803391 , 0.350268832952981 },
            {   1.41457575757576 ,    0.999684086840616 , 0.400313707498803 ,    22.9942179325798 , 0.350229729754129 },
            {   1.43981818181818 ,    0.999728192343471 , 0.400270049845192 ,    22.9950297003946 , 0.350197414338776 },
            {   1.46506060606061 ,    0.999766093062474 , 0.400232214687902 ,    22.9957258800472 , 0.350169460276603 },
            {   1.49030303030303 ,    0.999798496588153 , 0.400199894726263 ,      22.99632058371 , 0.350145627434407 },
            {   1.51554545454545 ,    0.999826230149263 , 0.400172255699973 ,    22.9968291640677 , 0.350125284823028 },
            {   1.54078787878788 ,    0.999849992158928 , 0.400148593947973 ,    22.9972645689803 , 0.350107901524118 },
            {    1.5660303030303 ,    0.999870372916044 , 0.400128315311149 ,    22.9976377304673 , 0.350093030295577 },
            {   1.59127272727273 ,    0.999887871883046 , 0.400110917540821 ,     22.997957888895 , 0.350080293943464 },
            {   1.61651515151515 ,    0.999902912121007 , 0.400095975615867 ,    22.9982328634528 , 0.350069373981018 },
            {   1.64175757575758 ,    0.999915852362099 , 0.400083129475244 ,    22.9984692780584 , 0.350060001180592 },
            {              1.667 ,    0.999926997116589 , 0.400072073758045 ,    22.9986727502426 , 0.350051947693731 },
            {   1.69224242424242 ,    0.999936605143099 , 0.400062549213755 ,    22.9988480492501 , 0.350045020471811 },
            {   1.71748484848485 ,     0.99994489655469 , 0.400054335503181 ,    22.9989992285197 , 0.350039055766251 },
            {   1.74272727272727 ,    0.999952058786662 , 0.400047245158635 ,    22.9991297368154 ,  0.35003391452603 },
            {    1.7679696969697 ,    0.999958251613622 , 0.400041118511395 ,    22.9992425115488 , 0.350029478541819 },
            {   1.79321212121212 ,    0.999963611371852 , 0.400035819426816 ,    22.9993400572356 , 0.350025647211694 },
            {   1.81845454545455 ,    0.999968254516239 , 0.400031231715142 ,    22.9994245115176 , 0.350022334825689 },
            {   1.84369696969697 ,    0.999972280620262 , 0.400027256107117 ,    22.9994977007923 , 0.350019468282643 },
            {   1.86893939393939 ,    0.999975789586445 ,  0.40002379271078 ,    22.9995614619418 , 0.350016973701334 },
            {   1.89418181818182 ,    0.999978821775065 , 0.400020802078431 ,    22.9996165228659 , 0.350014822994707 },
            {   1.91942424242424 ,    0.999981458423449 , 0.400018203062946 ,    22.9996643757025 , 0.350012956310321 },
            {   1.94466666666667 ,    0.999983753172249 , 0.400015942338954 ,    22.9997060016855 , 0.350011334626982 },
            {   1.96990909090909 ,    0.999985752112642 , 0.400013974118703 ,    22.9997422433853 , 0.350009924491435 },
            {   1.99515151515152 ,     0.99998749488695 , 0.400012259048221 ,    22.9997738250117 , 0.350008697194962 },
            {   2.02039393939394 ,    0.999989015624126 , 0.400010763269656 ,    22.9998013696592 , 0.350007628074824 },
            {   2.04563636363636 ,    0.999990343733881 , 0.400009457626237 ,    22.9998254139305 , 0.350006695923558 },
            {   2.07087878787879 ,    0.999991504583212 , 0.400008316985313 ,    22.9998464203885 ,   0.3500058824865 },
            {   2.09612121212121 ,    0.999992520072007 , 0.400007319663003 ,    22.9998647881394 , 0.350005172035797 },
            {   2.12136363636364 ,    0.999993409124248 , 0.400006446933487 ,    22.9998808618593 , 0.350004551007486 },
            {   2.14660606060606 ,    0.999994188106937 ,  0.40000568261089 ,    22.9998949394856 , 0.350004007692934 },
            {   2.17184848484849 ,    0.999994871188317 , 0.400005012691943 ,     22.999907278791 , 0.350003531975391 },
            {   2.19709090909091 ,    0.999995470643524 ,  0.40000442505148 ,    22.9999181029855 , 0.350003115106189 },
            {   2.22233333333333 ,    0.999995997117143 , 0.400003909180807 ,    22.9999276055298 ,  0.35000274951228 },
            {   2.24757575757576 ,    0.999996459847441 , 0.400003455964602 ,    22.9999359542401 , 0.350002428632729 },
            {   2.27281818181818 ,    0.999996866858841 , 0.400003057489511 ,    22.9999432948097 ,  0.35000214677855 },
            {   2.29806060606061 ,    0.999997225127329 ,  0.40000270687969 ,    22.9999497538357 ,  0.35000189901235 },
            {   2.32330303030303 ,    0.999997540722141 , 0.400002398156161 ,    22.9999554414061 , 0.350001681045763 },
            {   2.34854545454545 ,    0.999997818928391 , 0.400002126114934 ,    22.9999604533435 , 0.350001489150274 },
            {   2.37378787878788 ,    0.999998064351394 , 0.400001886223725 ,    22.9999648731053 , 0.350001320082393 },
            {    2.3990303030303 ,    0.999998281007771 , 0.400001674531463 ,    22.9999687734489 , 0.350001171017519 },
            {   2.42427272727273 ,    0.999998472403159 ,  0.40000148759139 ,    22.9999722178478 , 0.350001039494254 },
            {   2.44951515151515 ,    0.999998641599734 , 0.400001322394141 ,    22.9999752617222 , 0.350000923365747 },
            {   2.47475757575758 ,    0.999998791274229 , 0.400001176310359 ,    22.9999779534964 , 0.350000820758188 },
            {                2.5 ,     0.99999892376824 , 0.400001047040924 ,    22.9999803355137 , 0.350000730034766 }
        };
        
        for (size_t i=0; i < sizeof(im_test_data)/sizeof(im_test_data[0]); i++) {

            if (std::abs(im_test_data[i].mu_cost) < 1E-20) {
                BOOST_CHECK_SMALL(component_group->E_cost_IM(im_test_data[i].im), 1E-20);
            } else {
                BOOST_CHECK_CLOSE(component_group->E_cost_IM(im_test_data[i].im), 
                                  im_test_data[i].mu_cost,
                                  0.5);
            }

            if (std::abs(im_test_data[i].sd_cost) < 1E-6) {
                BOOST_CHECK_SMALL(component_group->SD_ln_cost_IM(im_test_data[i].im), 1E-6);
            } else {
                BOOST_CHECK_CLOSE(component_group->SD_ln_cost_IM(im_test_data[i].im), 
                                  im_test_data[i].sd_cost,
                                  1);
            }

            if (std::abs(im_test_data[i].mu_delay) < 1E-20) {
                BOOST_CHECK_SMALL(component_group->E_delay_IM(im_test_data[i].im), 1E-20);
            } else {
                BOOST_CHECK_CLOSE(component_group->E_delay_IM(im_test_data[i].im), 
                                  im_test_data[i].mu_delay,
                                  0.5);
            }

            if (std::abs(im_test_data[i].sd_delay) < 1E-6) {
                BOOST_CHECK_SMALL(component_group->SD_ln_delay_IM(im_test_data[i].im), 1E-6);
            } else {
                BOOST_CHECK_CLOSE(component_group->SD_ln_delay_IM(im_test_data[i].im), 
                                  im_test_data[i].sd_delay,
                                  1);
            }
        }
    }
    
    /*
     * Replacing the EDP-IM relationship should also erase the cache:
     */
    {
        shared_ptr<ProbabilisticFn> new_edp_im_relationship(
            new LogNormalFn(mu_edp, LogNormalFn::MEAN_X, sigma_edp, LogNormalFn::SIGMA_LN_X));
        std::shared_ptr<EDP> new_rel(new EDP(im_rate_rel, new_edp_im_relationship));
        component_group->get_EDP()->replace(new_rel);
    }
    for (size_t i=0; i < sizeof(im_test_data)/sizeof(im_test_data[0]); i++) {
        
        if (std::abs(im_test_data[i].mu_cost) < 1E-20) {
            BOOST_CHECK_SMALL(component_group->E_cost_IM(im_test_data[i].im), 1E-20);
        } else {
            BOOST_CHECK_CLOSE(component_group->E_cost_IM(im_test_data[i].im), 
                              im_test_data[i].mu_cost,
                              0.5);
        }

        if (std::abs(im_test_data[i].sd_cost) < 1E-6) {
            BOOST_CHECK_SMALL(component_group->SD_ln_cost_IM(im_test_data[i].im), 1E-6);
        } else {
            BOOST_CHECK_CLOSE(component_group->SD_ln_cost_IM(im_test_data[i].im), 
                              im_test_data[i].sd_cost,
                              1);
        }

        if (std::abs(im_test_data[i].mu_delay) < 1E-20) {
            BOOST_CHECK_SMALL(component_group->E_delay_IM(im_test_data[i].im), 1E-20);
        } else {
            BOOST_CHECK_CLOSE(component_group->E_delay_IM(im_test_data[i].im), 
                              im_test_data[i].mu_delay,
                              0.5);
        }

        if (std::abs(im_test_data[i].sd_delay) < 1E-6) {
            BOOST_CHECK_SMALL(component_group->SD_ln_delay_IM(im_test_data[i].im), 1E-6);
        } else {
            BOOST_CHECK_CLOSE(component_group->SD_ln_delay_IM(im_test_data[i].im), 
                              im_test_data[i].sd_delay,
                              1);
        }
    }
    
}

/**
 * Miscellaneous tests for the comp_group class.
 *
 * @todo Split this up? Document each test.
 * @todo Use three component groups as in earlier tests?
 */
BOOST_FIXTURE_TEST_CASE(comp_group_misc_tests, fixture)
{
    /*
     * Test data for loss rate:
     */
    struct {double loss, rate; } loss_rate_test_data[] = {
        { 1.0000E-04, 4.7032E-02 }, { 1.2089E-04, 4.5311E-02 }, { 1.4616E-04, 4.3607E-02 }, { 1.7669E-04, 4.1920E-02 }, 
        { 2.1361E-04, 4.0249E-02 }, { 2.5825E-04, 3.8593E-02 }, { 3.1221E-04, 3.6950E-02 }, { 3.7745E-04, 3.5347E-02 }, 
        { 4.5631E-04, 3.3703E-02 }, { 5.5166E-04, 3.2095E-02 }, { 6.6693E-04, 3.0496E-02 }, { 8.0628E-04, 2.8903E-02 }, 
        { 9.7475E-04, 2.7315E-02 }, { 1.1784E-03, 2.5730E-02 }, { 1.4246E-03, 2.4149E-02 }, { 1.7223E-03, 2.2572E-02 }, 
        { 2.0822E-03, 2.0976E-02 }, { 2.5173E-03, 1.9434E-02 }, { 3.0433E-03, 1.7883E-02 }, { 3.6791E-03, 1.6353E-02 }, 
        { 4.4479E-03, 1.4853E-02 }, { 5.3773E-03, 1.3394E-02 }, { 6.5008E-03, 1.1987E-02 }, { 7.8592E-03, 1.0643E-02 }, 
        { 9.5013E-03, 9.3747E-03 }, { 1.1487E-02, 8.1887E-03 }, { 1.3887E-02, 7.0982E-03 }, { 1.6788E-02, 6.1064E-03 }, 
        { 2.0296E-02, 5.2145E-03 }, { 2.4537E-02, 4.4236E-03 }, { 2.9664E-02, 3.7300E-03 }, { 3.5862E-02, 3.1292E-03 }, 
        { 4.3356E-02, 2.6140E-03 }, { 5.2415E-02, 2.1758E-03 }, { 6.3367E-02, 1.8063E-03 }, { 7.6607E-02, 1.4962E-03 }, 
        { 9.2614E-02, 1.2369E-03 }, { 0.1120, 1.0205E-03 }, { 0.1354, 8.3996E-04 }, { 0.1636, 6.8915E-04 }, 
        { 0.1978, 5.6286E-04 }, { 0.2392, 4.5683E-04 }, { 0.2892, 3.6776E-04 }, { 0.3496, 2.9251E-04 }, 
        { 0.4226, 2.2919E-04 }, { 0.5109, 1.7614E-04 }, { 0.6177, 1.3213E-04 }, { 0.7467, 9.6224E-05 }, 
        { 0.9028, 6.7716E-05 }, { 1.091, 4.5935E-05 },
    };

    /*
     * Test the lambda_cost() method:
     */
    for (size_t i=0; i < sizeof(loss_rate_test_data)/sizeof(loss_rate_test_data[0]); i++) {
        BOOST_CHECK_CLOSE(loss_rate_test_data[i].rate, component_group->lambda_cost(loss_rate_test_data[i].loss), 0.2);
    }
}


/**
 * Miscellaneous tests for the comp_group class.
 *
 * @todo Split this up? Document each test.
 * @todo Use three component groups as in earlier tests?
 */
BOOST_FIXTURE_TEST_CASE(comp_group_frag_reg_test, fixture)
{
    double value = component_group->E_annual_cost();
    BOOST_CHECK_CLOSE(component_group->E_annual_cost(), 6.76E-4, 0.1);
    std::shared_ptr<FragilityFn> fragFn(
        new FragilityFn( {
                from_mean_X_and_sigma_lnX(0.062, 0.4),
                    from_mean_X_and_sigma_lnX(0.230, 0.4),
                    from_mean_X_and_sigma_lnX(0.440, 0.4),
                    from_mean_X_and_sigma_lnX(0.564, 0.4)}));
    component_group->FragFn()->replace(fragFn);

    /*
     * We've changed the fragility function, so the result should be different:
     */
    BOOST_CHECK(component_group->E_annual_cost() != value);
}

BOOST_FIXTURE_TEST_CASE(comp_group_cost_rep_test, fixture)
{
    double cost = component_group->E_annual_cost();
    double delay = component_group->E_delay_IM(0.5);
    
    BOOST_CHECK_CLOSE(cost, 6.76E-4, 0.1);
    BOOST_CHECK_CLOSE(delay, 8.01, 0.1);
    
    std::shared_ptr<LossFn> costFn(new SimpleLossFn( {
                from_mean_X_and_sigma_lnX(0.3, 0.4),
                    from_mean_X_and_sigma_lnX(0.8, 0.4),
                    from_mean_X_and_sigma_lnX(2.5, 0.4),
                    from_mean_X_and_sigma_lnX(10.0, 0.4)}));
    component_group->CostFn()->replace(costFn);

    /*
     * We've changed the cost function, so the result should be different:
     */
    BOOST_CHECK(component_group->E_annual_cost() != cost);
    BOOST_CHECK(component_group->E_delay_IM(0.5) == delay);
}

BOOST_FIXTURE_TEST_CASE(comp_group_delay_rep_test, fixture)
{
    double cost = component_group->E_annual_cost();
    double delay = component_group->E_delay_IM(0.5);
    
    BOOST_CHECK_CLOSE(cost, 6.76E-4, 0.1);
    BOOST_CHECK_CLOSE(delay, 8.01, 0.1);
    
    std::shared_ptr<LossFn> delayFn(new SimpleLossFn( {
                from_mean_X_and_sigma_lnX(0.150, 0.20),
                    from_mean_X_and_sigma_lnX(0.375, 0.25), 
                    from_mean_X_and_sigma_lnX(1.00, 0.30),
                    from_mean_X_and_sigma_lnX(2.30, 0.35)}));
    component_group->DelayFn()->replace(delayFn);

    /*
     * We've changed the cost function, so the result should be different:
     */
    BOOST_CHECK(component_group->E_annual_cost() == cost);
    BOOST_CHECK(component_group->E_delay_IM(0.5) != delay);
}
